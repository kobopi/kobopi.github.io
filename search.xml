<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>blibli视频适配测试</title>
      <link href="/2022/11/12/blibli/"/>
      <url>/2022/11/12/blibli/</url>
      
        <content type="html"><![CDATA[<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">样例视频</button></li><li class="tab"><button type="button" data-href="#test1-2">代码展示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><div align="center" class="aspect-ratio">  <iframe    src="https://player.bilibili.com/player.html?aid=685282450&&page=1&as_wide=1&high_quality=1&danmaku=0"    scrolling="no"    border="0"    frameborder="no"    framespacing="0"    high_quality="1"    danmaku="1"    allowfullscreen="true"  ></iframe></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aspect-ratio&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://player.bilibili.com/player.html?aid=视频id&amp;&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">border</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">high_quality</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">danmaku</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 小工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo线上部署</title>
      <link href="/2022/11/11/Hexoonline/"/>
      <url>/2022/11/11/Hexoonline/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo线上部署"><a href="#Hexo线上部署" class="headerlink" title="Hexo线上部署"></a>Hexo线上部署</h1><h3 id="Vercel-部署"><a href="#Vercel-部署" class="headerlink" title="Vercel 部署"></a>Vercel 部署</h3><p>Vercel 简介：<a href="https://vercel.com/dashboard">vercel</a> 是一个代码托管平台，它能够托管你的静态 html 界面，甚至能够托管你的 node.js 与 Python 服务端脚本，是 <strong>不想买服务器的懒人的福音</strong>！</p><p><strong>使用 Vercel 部署 Hexo 项目步骤：</strong></p><ol><li>首先需要一个 Vercel 账号，这里<strong>推荐用 GitHub 账户关联，这样你就可以在 vercel 中直接托管你的 GitHub 库中的项目了</strong>，实现开发部署一步到位（网络不流畅可以考虑挂梯子）。<br><a href="https://s1.vika.cn/space/2022/10/27/5ecde0efb97e4efe8c872c07f2b29301"><img src="https://s1.vika.cn/space/2022/10/27/5ecde0efb97e4efe8c872c07f2b29301" alt="image-20221027223132537"></a></li><li>当你用你的 Github 账户关联并绑定手机号登录之后，点击右上角的 <code>Add New Project</code> 创建新的项目，之后导入选项那里选择 <code>Continue with Github</code>，这时候应该能看到你 Github 账号的仓库，选择你刚刚部署成功的存储静态博客的仓库 <code>&lt;username&gt;.github.io</code> 右边的 <code>Import</code> 选项，表示你要导入该仓库。<br><a href="https://s1.vika.cn/space/2022/10/27/13d509ad17d44a5ebf60d6bd7cde05f4"><img src="https://s1.vika.cn/space/2022/10/27/13d509ad17d44a5ebf60d6bd7cde05f4" alt="image-20221027223231192"></a><br><a href="https://s1.vika.cn/space/2022/10/27/23780c3fc63546559ff02d303f97e37d"><img src="https://s1.vika.cn/space/2022/10/27/23780c3fc63546559ff02d303f97e37d" alt="image-20221027223420282"></a><br><a href="https://s1.vika.cn/space/2022/10/27/7e1c080e435648a1a27a0f21d19e979d"><img src="https://s1.vika.cn/space/2022/10/27/7e1c080e435648a1a27a0f21d19e979d" alt="image-20221027223742660"></a></li><li>起一个只能有字母、数字或者或者连字符的项目名称，然后其他默认，点击 <code>Deploy</code>，等待一分钟即可部署成功，部署成功后电极 <code>Continue to Dashboard</code> 跳转到控制面板，下图所示就是控制面板，看到就代表成功部署到了，但是我们现在还不能访问他给出的域，因为 GFW 最近把 Vercel 屏蔽了。</li></ol><p><a href="https://s1.vika.cn/space/2022/10/27/09b5ce9b3ac64d2dad2acdf3cca92b5f"><img src="https://s1.vika.cn/space/2022/10/27/09b5ce9b3ac64d2dad2acdf3cca92b5f" alt="image-20221027224225808"></a></p><p><a href="https://s1.vika.cn/space/2022/10/27/43c6816280914f6ebbab1d6ec345c8f9"><img src="https://s1.vika.cn/space/2022/10/27/43c6816280914f6ebbab1d6ec345c8f9" alt="image-20221027224405464"></a></p><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>现在你的个人网站的地址是 <code>username.github.io</code> 以及在 Vercel 上有一个 <code>blog-demo-chi.vercel.app</code>。如果觉得不够定制化，可以购买一个专属域名。</p><p>这一步不是必要的，如果目前还不想买域名可以先跳过。</p><p>腾讯云、阿里云等都是不错的域名代理商，建议选用 <code>com</code>，<code>cn</code> 或 <code>cc</code> 这类常用好记的顶域，对 SEO 比较友好，自定义部分的长度尽可能短别人才会更容易地记住你的网站，要知道域名就是你网站的卡片。此处以阿里云域名为例进行说明，购买域名后，实名认证进入阿里云控制台，点云解析进去，找到你刚买的域名，点进去添加 Vercel 所需的解析记录，注意博主这里是解析二级域名只需要解析一条即可。但是如果是一级域名，需要解析两个，一个是 <code>@</code>，另外一个是 <code>www</code>，Vercel 建议是 <code>@</code>的解析重定向至 <code>www</code>。</p><p>以我的域名：<code>fomal.cc</code> 为例进行说明</p><div class="table-container"><table><thead><tr><th style="text-align:center">主机记录</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">www</td><td style="text-align:center">解析后的域名为 <a href="http://www.fomal.cc/">www.fomal.cc</a></td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">直接解析主域名 <a href="http://fomal.cc/">fomal.cc</a></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">泛解析，匹配其他所有域名 *.fomal.cc</td></tr><tr><td style="text-align:center">mail</td><td style="text-align:center">将域名解析为 <a href="http://mail.fomal.cc/">mail.fomal.cc</a>，通常用于解析邮箱服务器</td></tr><tr><td style="text-align:center">二级</td><td style="text-align:center">如 <a href="http://abc.fomal.cc/">abc.fomal.cc</a>，填写 abc</td></tr><tr><td style="text-align:center">手机网站</td><td style="text-align:center">如 <a href="http://m.fomal.cc/">m.fomal.cc</a>，填写 m</td></tr><tr><td style="text-align:center">显性 URL</td><td style="text-align:center">不支持泛解析（泛解析：将所有子域名解析到同一地址）</td></tr></tbody></table></div><p>将域名指向云服务器，请选择「A」； 将域名指向另一个域名，请选择「CNAME」； 建立邮箱请选择「MX」，根据邮箱服务商提供的 MX 记录填写。</p><div class="table-container"><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录。</td></tr><tr><td style="text-align:center">CNAME</td><td style="text-align:center">如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</td></tr><tr><td style="text-align:center">MX</td><td style="text-align:center">如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。</td></tr><tr><td style="text-align:center">TXT</td><td style="text-align:center">在这里可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）</td></tr><tr><td style="text-align:center">NS</td><td style="text-align:center">域名服务器记录，如果需要将子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。</td></tr><tr><td style="text-align:center">AAAA</td><td style="text-align:center">用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。</td></tr><tr><td style="text-align:center">SRV</td><td style="text-align:center">记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp。</td></tr><tr><td style="text-align:center">显性 URL</td><td style="text-align:center">从一个地址 301 重定向到另一个地址的时候，就需要添加显性 URL 记录（注：DNSPod 目前只支持 301 重定向）。</td></tr><tr><td style="text-align:center">隐性 URL</td><td style="text-align:center">类似于显性 URL，区别在于隐性 URL 不会改变地址栏的域名。</td></tr></tbody></table></div><p><strong>添加自定义域名的步骤：</strong></p><ol><li>点击 Vercel 控制面板右上角的 <code>View Domains</code> 查看当前的域，我们可以看到仅有 Vercel 给你预分配的一个域名，此时我们输入刚刚购买的域名，我这里以二级域名 <code>demo.fomal.cc</code> 为例进行说明，添加后他会提示你添加一条 DNS 解析记录。<br><a href="https://s1.vika.cn/space/2022/10/27/f0890ccf90d04ac7985a40558b8f0aad"><img src="https://s1.vika.cn/space/2022/10/27/f0890ccf90d04ac7985a40558b8f0aad" alt="image-20221027224803563"></a><br><a href="https://s1.vika.cn/space/2022/10/27/3a1e809ca99a452fae6229d9b69134ad"><img src="https://s1.vika.cn/space/2022/10/27/3a1e809ca99a452fae6229d9b69134ad" alt="image-20221027224830609"></a><br><a href="https://s1.vika.cn/space/2022/10/27/1bd6bdd5cc924661a0bf779997240e86"><img src="https://s1.vika.cn/space/2022/10/27/1bd6bdd5cc924661a0bf779997240e86" alt="image-20221027225338126"></a><br><strong>PS</strong>：如果你是新买的域名，直接输入你新买的一级域名即可，例如 <code>demo123.com</code>，他会推荐你将 <code>demo123.com</code> 重定向至 <code>www.demo123.com</code>，点 <code>ADD</code> 即可，然后他会提示你添加两条解析记录，一个是 <code>@</code>开头的和 <code>CNAME</code> 开头的，添加记录的方法和二级域名一致。<br><a href="https://s1.vika.cn/space/2022/10/27/66c6d6f8fac84481b788228c4222864d"><img src="https://s1.vika.cn/space/2022/10/27/66c6d6f8fac84481b788228c4222864d" alt="image-20221027225758503"></a><br><a href="https://s1.vika.cn/space/2022/10/27/d6dd5ec65e93439482a7ddd5833ebd9d"><img src="https://s1.vika.cn/space/2022/10/27/d6dd5ec65e93439482a7ddd5833ebd9d" alt="image-20221027225808449"></a></li><li>在阿里云域名解析记录里面添加如下记录，其中记录类型对应 <code>Type</code>，主机记录对应 <code>Name</code>，记录值对应 <code>Value</code>，其他的设置默认即可。<br><a href="https://s1.vika.cn/space/2022/10/27/83c253f0710f44c1b80bc662e4a97636"><img src="https://s1.vika.cn/space/2022/10/27/83c253f0710f44c1b80bc662e4a97636" alt="image-20221027230049667"></a></li><li>回到 Vercel 刚刚查看域名的地方，如果操作没问题，应该会显示域名配置成功的提示，此时就可以通过自定义域名来访问我们搭建的网站了。<br><a href="https://s1.vika.cn/space/2022/10/27/9604de65a5524ba88d7e43f9412229d3"><img src="https://s1.vika.cn/space/2022/10/27/9604de65a5524ba88d7e43f9412229d3" alt="image-20221027230357362"></a><br><a href="https://s1.vika.cn/space/2022/10/27/244bc979f30149778b9e1ffc7038ecd0"><img src="https://s1.vika.cn/space/2022/10/27/244bc979f30149778b9e1ffc7038ecd0" alt="image-20221027230421929"></a></li><li>当你有了新的域名之后，需要 <code>[BlogRoot]\_config.yml</code> 文件中的 <code>url</code> 配置项为自己的新域名，这样博客的文章链接才会正确生成。</li></ol><p><a href="https://s1.vika.cn/space/2022/10/28/fa95d5aef2ac45deb4a02400056047e1"><img src="https://s1.vika.cn/space/2022/10/28/fa95d5aef2ac45deb4a02400056047e1" alt="image-20221028113042788"></a></p>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓补序列</title>
      <link href="/2022/11/11/TS/"/>
      <url>/2022/11/11/TS/</url>
      
        <content type="html"><![CDATA[<h1 id="拓补序列"><a href="#拓补序列" class="headerlink" title="拓补序列"></a>拓补序列</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mode = <span class="number">80112002</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span><span class="comment">//记录单点的出度入度</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> in=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> out=<span class="number">0</span>;</span><br><span class="line">&#125;jd[<span class="number">1000001</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[<span class="number">10001</span>];<span class="comment">//存图</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; qe;<span class="comment">//拓补核心</span></span><br><span class="line"><span class="type">int</span> nums[<span class="number">10001</span>];</span><br><span class="line"><span class="type">int</span> n, m,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;<span class="comment">//存图</span></span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        mp[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        jd[a].out++;</span><br><span class="line">        jd[b].in++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;<span class="comment">//找到入度为零者</span></span><br><span class="line">        <span class="keyword">if</span>(!jd[i].in)&#123;</span><br><span class="line">            nums[i] = <span class="number">1</span>;</span><br><span class="line">            qe.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!qe.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u = qe.<span class="built_in">front</span>();</span><br><span class="line">        qe.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mp[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">int</span> next = mp[u][i];</span><br><span class="line">            jd[next].in--;</span><br><span class="line">            nums[next] =(nums[next]+nums[u]);</span><br><span class="line">            <span class="keyword">if</span>(!jd[next].in)</span><br><span class="line">                qe.<span class="built_in">push</span>(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!jd[i].out)</span><br><span class="line">            ans = (ans + nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度：n-m"><a href="#时间复杂度：n-m" class="headerlink" title="时间复杂度：n+m"></a>时间复杂度：n+m</h3>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉查找</title>
      <link href="/2022/11/11/bsfind/"/>
      <url>/2022/11/11/bsfind/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h4 id="binary-search-a-a-n-x"><a href="#binary-search-a-a-n-x" class="headerlink" title="binary_search(a,a+n,x)"></a><strong>binary_search(a,a+n,x)</strong></h4><p>返回值为真或假（01）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;int&gt; vc;</span><br><span class="line">int main()&#123;</span><br><span class="line">    for (int i = 0; i &lt; 5;i++)&#123;</span><br><span class="line">        int num;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        vc.push_back(num);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; binary_search(vc.begin(), vc.end(), 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> STL库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉堆</title>
      <link href="/2022/11/11/bsheap/"/>
      <url>/2022/11/11/bsheap/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h1><h3 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h3><p>大顶堆：每个结点的值都大于或等于其左右孩子结点的值<br>小顶堆：每个结点的值都小于或等于其左右孩子结点的值<br>二叉堆就是一颗二叉树，是一颗完全二叉树</p><p>定义两个操作：<br>down（int k ）：从编号为k的点向下更新<br>up（int k) :从编号为k的点向上更新</p><p>h[]堆数组，size堆当前大小<br>堆的变化(都可以由上面定义的两个操作来实现)：<br>1.插入一个数 -&gt; h[++ size] = x; up(size)<br>2.求集合中的最小值 -&gt; h[1]<br>3.删除最小值 -&gt; h[1] = h[size]; size —; down(1)<br>4.删除任意一个元素 -&gt; h[k] = h[size]; size —; down(k); up(k);<br>5.修改任意一个元素 -&gt; h[k] = x; down(k); up(k);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span> <span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t = u;<span class="comment">//t存储当前位置和左右儿子的最小节点</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * u &lt;= size1 &amp;&amp; h[<span class="number">2</span> * u] &lt; h[t])t = <span class="number">2</span> * u;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * u + <span class="number">1</span> &lt;= size1 &amp;&amp; h[<span class="number">2</span> * u + <span class="number">1</span>] &lt; h[t]) t = <span class="number">2</span> * u + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (u != t)<span class="comment">//如果父节点大于其中的儿子节点需要down操作</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span> (h[u], h[t]);</span><br><span class="line"><span class="built_in">down</span> (t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(u/<span class="number">2</span> &amp;&amp; h[u/<span class="number">2</span>]&gt;h[u])<span class="comment">//父结点的值大于儿子节点需要交换</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">h_swap</span>(u/<span class="number">2</span>,u);</span><br><span class="line">        u/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OI-C++竞赛常用STL库和板子（持续更新）</title>
      <link href="/2022/11/11/c++oi/"/>
      <url>/2022/11/11/c++oi/</url>
      
        <content type="html"><![CDATA[<div class="tip "><p>该文章仅限个人备忘，请保证阅读前具有一定的编程语言基础以及知晓C++原理</p></div><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头模板</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info simple"><p>于在C++比赛的选手，万能头文件应该是必学的一种简单易学的头文件</p></div><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><details class="folding-tag" cyan><summary> 点此查看教程 </summary>              <div class='content'>              <h2 id="cin与cout的加速处理"><a href="#cin与cout的加速处理" class="headerlink" title="cin与cout的加速处理"></a>cin与cout的加速处理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::ios::sync_with_stdio(false);</span><br></pre></td></tr></table></figure><div class="note info simple"><p>cin，cout效率低是因为先把要输出的东西存入缓冲区，再输出，导致效率降低。这段语句取消iostream的输入输出缓存，可以显著提高cin和cout效率。当然，也可以使用printf和scanf。</p></div><h2 id="scanf与printf"><a href="#scanf与printf" class="headerlink" title="scanf与printf"></a>scanf与printf</h2><div class="note info simple"><p>姑且不提，在使用c语言时，语法应烂熟于心了</p></div><h2 id="快读快写模板"><a href="#快读快写模板" class="headerlink" title="快读快写模板"></a>快读快写模板</h2><p>快读：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">read</span>();</span><br><span class="line">    cout &lt;&lt; x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="note info simple"><p>原理在于在C++中，字符的读入比数值类型快</p></div><div class="tip warning faa-horizontal animated-hover"><p>问题在于，如果启用了快读模板，请不要与cin和scanf混用</p></div>              </div>            </details><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort(数组名，数组长度，规则);</span></span><br><span class="line"><span class="built_in">sort</span>(a,a+n,cmp);</span><br><span class="line"><span class="comment">//sort(首部，尾部，规则);</span></span><br><span class="line"><span class="built_in">sort</span>(vector.<span class="built_in">begin</span>(),vc.<span class="built_in">end</span>(),cmp);</span><br></pre></td></tr></table></figure><div class="note info simple"><p>值得一提的是，如果以vector的动态数组，可以存入不同的数据结构类型，也可以进行自动排序，如string，数组等等</p></div>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> STL库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快读模板</title>
      <link href="/2022/11/11/fastread/"/>
      <url>/2022/11/11/fastread/</url>
      
        <content type="html"><![CDATA[<h3 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">read</span>();</span><br><span class="line">    cout &lt;&lt; x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>cin&gt;scanf&gt;快读</em></p>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 优化技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2022/11/11/dds/"/>
      <url>/2022/11/11/dds/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">fa[i]=i;<span class="comment">//初始化每个人是自身的祖先</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">找不到就像上找</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fd</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[x]==x?x:(fa[x]=<span class="built_in">find</span>(fa[x]))</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本质：fa[x]=y;</span><br><span class="line">让y做x的爸爸</span><br><span class="line">所以：</span><br><span class="line">fa[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);</span><br></pre></td></tr></table></figure><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><h5 id="克鲁斯卡尔（适用于稠密图）"><a href="#克鲁斯卡尔（适用于稠密图）" class="headerlink" title="克鲁斯卡尔（适用于稠密图）"></a>克鲁斯卡尔（适用于稠密图）</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y,t;</span><br><span class="line">&#125;gl[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.t&lt;y.t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fd</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//查找函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x]==x?x:(fa[x]=<span class="built_in">fd</span>(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hb</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span><span class="comment">//合并函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">fd</span>(x)]=<span class="built_in">fd</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> cnt=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    fa[i]=i;<span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;gl[i].x&gt;&gt;gl[i].y&gt;&gt;gl[i].t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(gl+<span class="number">1</span>,gl+m+<span class="number">1</span>,cmp);<span class="comment">//从小到大排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fd</span>(gl[i].x)!=<span class="built_in">fd</span>(gl[i].y))&#123;<span class="comment">//如果两个点没有形成环路，则合并两个点</span></span><br><span class="line">    <span class="built_in">hb</span>(gl[i].x,gl[i].y);</span><br><span class="line">   sum+=gl[i].z;</span><br><span class="line">    cnt--;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆优化版：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m=<span class="number">0</span>,n=<span class="number">1</span>; </span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) </span><br><span class="line"> n=<span class="number">-1</span>;</span><br><span class="line">    ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m=m*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> m*n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">  <span class="type">int</span> x,y,z;</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node&amp; a)<span class="type">const</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a.z&lt;z;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt;qe;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fd</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fa[x]==x?x:(fa[x]=<span class="built_in">fd</span>(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hb</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  fa[<span class="built_in">fd</span>(x)]=<span class="built_in">fd</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,m,cnt,sum=<span class="number">0</span>;</span><br><span class="line">  n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    fa[i]=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="type">int</span> x,y,z;</span><br><span class="line">    x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),z=<span class="built_in">read</span>();</span><br><span class="line">    qe.<span class="built_in">push</span>(&#123;x,y,z&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!qe.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    <span class="type">int</span> xx=qe.<span class="built_in">top</span>().x;</span><br><span class="line">    <span class="type">int</span> yy=qe.<span class="built_in">top</span>().y;</span><br><span class="line">    <span class="type">int</span> zz=qe.<span class="built_in">top</span>().z;</span><br><span class="line">    qe.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fd</span>(xx)!=<span class="built_in">fd</span>(yy))&#123;</span><br><span class="line">      <span class="built_in">hb</span>(xx,yy);</span><br><span class="line">      sum+=zz;</span><br><span class="line">      cnt++;</span><br><span class="line">      <span class="keyword">if</span>(cnt==n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="普利姆（适用于稀疏图）"><a href="#普利姆（适用于稀疏图）" class="headerlink" title="普利姆（适用于稀疏图）"></a>普利姆（适用于稀疏图）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还没学，以后再说</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>质数筛</title>
      <link href="/2022/11/11/prime/"/>
      <url>/2022/11/11/prime/</url>
      
        <content type="html"><![CDATA[<h1 id="质数筛"><a href="#质数筛" class="headerlink" title="质数筛"></a>质数筛</h1><h2 id="暴力筛"><a href="#暴力筛" class="headerlink" title="暴力筛"></a>暴力筛</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="built_in">sqrt</span>(n);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度：√-n"><a href="#时间复杂度：√-n" class="headerlink" title="时间复杂度：√ n"></a>时间复杂度：√ n</h3><h2 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void GetPrime(int n)//筛到n</span><br><span class="line">&#123;</span><br><span class="line">memset(isPrime, 1, sizeof(isPrime));</span><br><span class="line">//以“每个数都是素数”为初始状态，逐个删去</span><br><span class="line">isPrime[1] = 0;//1不是素数</span><br><span class="line"></span><br><span class="line">for(int i = 2; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(isPrime[i])//没筛掉 </span><br><span class="line">Prime[++cnt] = i; //i成为下一个素数</span><br><span class="line"></span><br><span class="line">for(int j = 1; j &lt;= cnt &amp;&amp; i*Prime[j] &lt;= n/*不超上限*/; j++) </span><br><span class="line">&#123;</span><br><span class="line">        //从Prime[1]，即最小质数2开始，逐个枚举已知的质数，并期望Prime[j]是(i*Prime[j])的最小质因数</span><br><span class="line">            //当然，i肯定比Prime[j]大，因为Prime[j]是在i之前得出的</span><br><span class="line">isPrime[i*Prime[j]] = 0;</span><br><span class="line">            </span><br><span class="line">if(i % Prime[j] == 0)//i中也含有Prime[j]这个因子</span><br><span class="line">break; //重要步骤。见原理</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度：n"><a href="#时间复杂度：n" class="headerlink" title="时间复杂度：n"></a>时间复杂度：n</h3><h3 id="六素数筛"><a href="#六素数筛" class="headerlink" title="六素数筛"></a>六素数筛</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路</title>
      <link href="/2022/11/11/shortroad/"/>
      <url>/2022/11/11/shortroad/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h1><p><img src="https://img-blog.csdnimg.cn/adef431fcf0141ad96b2c413fd38a125.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASlNVLVlTSg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h2 id="单源最短路"><a href="#单源最短路" class="headerlink" title="单源最短路"></a>单源最短路</h2><h3 id="正权"><a href="#正权" class="headerlink" title="正权"></a>正权</h3><h4 id="dijk-优化版"><a href="#dijk-优化版" class="headerlink" title="dijk(优化版)"></a>dijk(优化版)</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> head[<span class="number">1000001</span>],n,m,t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> num,dist;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x.dist&lt;dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">star</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w,next;</span><br><span class="line">&#125;st[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adds</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">st[++cnt].u=u,st[cnt].v=v,st[cnt].w=w;</span><br><span class="line">st[cnt].next=head[u],head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dit[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1000000</span>];</span><br><span class="line">priority_queue&lt;node&gt;qe;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijk</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dit,inf,<span class="built_in">sizeof</span>(dit));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    dit[s]=<span class="number">0</span>;</span><br><span class="line">    qe.<span class="built_in">push</span>(&#123;s,dit[s]&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!qe.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=qe.<span class="built_in">top</span>().num;</span><br><span class="line">        qe.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=st[i].next)&#123;</span><br><span class="line">            <span class="type">int</span> v=st[i].v;</span><br><span class="line">            <span class="keyword">if</span>(dit[v]&gt;dit[u]+st[i].w)&#123;</span><br><span class="line">                dit[v]=dit[u]+st[i].w;</span><br><span class="line">                qe.<span class="built_in">push</span>(&#123;v,dit[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">    cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">    <span class="built_in">adds</span>(u,v,w);</span><br><span class="line">    <span class="built_in">adds</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">    <span class="built_in">dijk</span>(u);</span><br><span class="line">    cout&lt;&lt;dit[v]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负权"><a href="#负权" class="headerlink" title="负权"></a>负权</h3><h2 id="多元最短路"><a href="#多元最短路" class="headerlink" title="多元最短路"></a>多元最短路</h2><h4 id="弗洛伊德"><a href="#弗洛伊德" class="headerlink" title="弗洛伊德"></a>弗洛伊德</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N   = 105;</span><br><span class="line">const int inf = 2147483647;</span><br><span class="line"> </span><br><span class="line">int n, m;</span><br><span class="line">int Map[N][N];</span><br><span class="line">void Folyd() &#123;</span><br><span class="line">    for(int i = 1; i &lt;= n; i ++) &#123;</span><br><span class="line">        for(int j = 1; j &lt;= n; j ++) &#123;</span><br><span class="line">            for(int k = 1; k &lt;= n; k ++) &#123;</span><br><span class="line">//注意一定要 i 为中间变量</span><br><span class="line">                if(Map[j][k] &gt; Map[j][i] + Map[i][k])&#123;</span><br><span class="line">                    Map[j][k] = Map[j][i] + Map[i][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char const *argv[]) &#123;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        for (int j = 1; j &lt;= n; j++)</span><br><span class="line">            if (i != j) Map[i][j] = inf;</span><br><span class="line">    for(int i = 1; i &lt;= m; i ++) &#123;</span><br><span class="line">        int a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt;c;</span><br><span class="line">        Map[a][b] = c;</span><br><span class="line">        Map[b][a] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    Folyd();</span><br><span class="line">    for(int i = 1; i &lt;= n; i ++) </span><br><span class="line">        for(int j = 1; j &lt;= n; j ++) </span><br><span class="line">            cout &lt;&lt; &quot;从&quot; &lt;&lt; i &lt;&lt; &quot;到&quot; &lt;&lt; j &lt;&lt; &quot;最短路径:&quot; &lt;&lt; Map[i][j] &lt;&lt; endl; </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 堆优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2022/11/11/sortpow/"/>
      <url>/2022/11/11/sortpow/</url>
      
        <content type="html"><![CDATA[<h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>, n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<span class="comment">//求n^m mod k的值</span></span><br><span class="line">    <span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m&amp;<span class="number">1</span>==<span class="number">1</span>)</span><br><span class="line">            ans = ans * n % k;</span><br><span class="line">        n = n * n % k;</span><br><span class="line">        m = m &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans % k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>幂指数 奇数*自身（n）变偶数</p><p>偶数自乘跳跃性到达位置</p><h3 id="时间复杂度：log2（n）"><a href="#时间复杂度：log2（n）" class="headerlink" title="时间复杂度：log2（n）"></a>时间复杂度：log2（n）</h3>]]></content>
      
      
      <categories>
          
          <category> 码农 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
